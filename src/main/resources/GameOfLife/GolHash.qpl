import Curl

func Hash golHash (Hash id) {
  curl = curlAbsorb(0, id, 27)
  result = curlSqueeze(curl, 27)
  return result.hash
}

template golSign<T> {
  type Col [T]
  type Row [T]
  type Grid [Row * Col]
  type Hashes [Grid / Hash]
  func Hash golSign<T>(Hash id, Grid grid) {
    curl = curlAbsorb(0, id, 27)
    result = curlSqueeze(curl, 27)
    return golHashGrid<T>(grid, result.curlState)
  }

  func Hash golHashGrid<T>(Grid grid, CurlState scratch) {
    result = curlSqueeze(golHashGridLoop<T>(grid, scratch, all<Hashes>(1)), 27)
    return result.hash
  }

  func CurlState golHashGridLoop<T>(Grid grid, CurlState curl, Hashes rowShifter)
  {
    // check if row shifter is done
    rowShifterIsDone = isZero[rowShifter[0]]
    return rowShifterIsDone ? curl : golHashGridRow<T>(grid, curl, rowShifter)
  }

  func CurlState golHashGridRow<T>(Grid grid, CurlState curl, Hashes rowShifter)
  {
    newGrid = grid[Hash : Grid - Hash] & as<Hash>(0)
    newCurl = curlAbsorb(curl, grid[0 : Hash], 27)
    return golHashGridLoop<T>(newGrid, newCurl, lshift<Hashes>(rowShifter))
  }
}
