// LUT logic: return (Bool) (trit1 != trit2)
lut unequal {
  -,- = false
  -,0 = true
  -,1 = true
  0,- = true
  0,0 = false
  0,1 = true
  1,- = true
  1,0 = true
  1,1 = false
}

// returns (Bool) (lhs != rhs)

func Bool unequal<Trit>(Trit lhs, Trit rhs) {
  return unequal[lhs, rhs]
}

template unequal3<T> = A + B + C {
  type A [T / 3]
  type B [T / 3]
  type C [T / 3]

  func Bool unequal<T>(T lhs, T rhs) {
    val0 = unequal<A>(lhs[0 : A], rhs[0 : A])
    val1 = unequal<B>(lhs[A : B], rhs[A : B])
    val2 = unequal<C>(lhs[A + B : C], rhs[A + B : C])
    return or3[val0, val1, val2]
  }
}

template unequal<T> {
  type A [T - T / 2]
  type B [T  - A]

  func Bool unequal<T>(T lhs, T rhs) {
    val0 = unequal<A>(lhs[0 : A], rhs[0 : A])
    val1 = unequal<B>(lhs[A : B], rhs[A : B])
    return or[val0, val1]
  }
}
