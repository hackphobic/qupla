// returns a trit vector that repeats the input trit
// passing 1 will generate the maximum value for the return type
// passing 0 will generate zero for the return type (pretty useless)
// passing - will generate the minimum value for the return type

func Trit all<Trit> (Trit val) {
  return val
}

template all3<T> = A + B + C {
  type A [T / 3]
  type B [T / 3]
  type C [T / 3]

  func T all<T>(Trit val) {
    val0 = all<A>(val)
    val1 = all<B>(val)
    val2 = all<C>(val)
    return val0 & val1 & val2
  }
}

template all<T> {
  type A [T - T / 2]
  type B [T  - A]

  func T all<T>(Trit val) {
    val0 = all<A>(val)
    val1 = all<B>(val)
    return val0 & val1
  }
}
