// LUT logic: return (trit1 < trit2) ? - : (trit1 > trit2) ? 1 : 0;
lut cmp {
  -,- = 0
  0,- = 1
  1,- = 1
  -,0 = -
  0,0 = 0
  1,0 = 1
  -,1 = -
  0,1 = -
  1,1 = 0
}

// LUT logic: return (Bool) (trit1 < 0)
lut isLess {
  - = 1
  0 = -
  1 = -
}

// LUT logic: return (Bool) (trit1 > 0)
lut isGreater {
  - = -
  0 = -
  1 = 1
}

// LUT logic: return (Bool) (trit1 == 0)
lut isEqual {
  - = -
  0 = 1
  1 = -
}

// LUT logic: return (Bool) (trit1 >= 0)
lut notLess {
  - = -
  0 = 1
  1 = 1
}

// LUT logic: return (Bool) (trit1 <= 0)
lut notGreater {
  - = 1
  0 = 1
  1 = -
}

// LUT logic: return (Bool) (trit1 != 0)
lut notEqual {
  - = 1
  0 = -
  1 = 1
}


// returns (Bool) ((lhs < rhs) ? - : (lhs > rhs) ? 1 : 0)

func Trit cmp<Trit> (Trit lhs, Trit rhs) {
  return cmp[lhs, rhs]
}

template cmp3<T> = A + B + C {
  type A [T / 3]
  type B [T / 3]
  type C [T / 3]

  func Trit cmp<T> (T lhs, T rhs) {
    val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
    val1 = cmp<B>(lhs[A : B], rhs[A : B])
    val2 = cmp<C>(lhs[A + B : C], rhs[A + B : C])
    return sign[val0, val1, val2]
  }
}

template cmp<T> {
  type A [T - T / 2]
  type B [T - A]

  func Trit cmp<T> (T lhs, T rhs) {
    val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
    val1 = cmp<B>(lhs[A : B], rhs[A : B])
    return sign[val0, val1, 0]
  }
}
