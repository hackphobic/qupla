// LUT logic: return (Bool) (((trit1 + trit2 + trit3) & 1) == 0 ? 1 : 0)
lut even {
  -,-,- = false
  0,-,- = true
  1,-,- = false
  -,0,- = true
  0,0,- = false
  1,0,- = true
  -,1,- = false
  0,1,- = true
  1,1,- = false
  -,-,0 = true
  0,-,0 = false
  1,-,0 = true
  -,0,0 = false
  0,0,0 = true
  1,0,0 = false
  -,1,0 = true
  0,1,0 = false
  1,1,0 = true
  -,-,1 = false
  0,-,1 = true
  1,-,1 = false
  -,0,1 = true
  0,0,1 = false
  1,0,1 = true
  -,1,1 = false
  0,1,1 = true
  1,1,1 = false
}

// returns (Bool) ((val & 1) == 0 ? 1 : 0)

func Bool even<Trit> (Trit val) {
  return even[val, 0, 0]
}

func Bool even<Tryte> (Tryte val) {
  return even[val[0], val[1], val[2]]
}

template even3<T> = A + B + C {
  type A [T / 3]
  type B [T / 3]
  type C [T / 3]

  func Bool even<T> (T val) {
    val0 = even<A>(val[0 : A])
    val1 = even<B>(val[A : B])
    val2 = even<C>(val[A + B : C])
    return xor3[val0, val1, val2]
  }
}

template even<T> {
  type A [T - T / 2]
  type B [T - A]

  func Bool even<T> (T val) {
    val0 = even<A>(val[0 : A])
    val1 = even<B>(val[A : B])
    return xor[val0, val1]
  }
}
