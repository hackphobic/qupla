// returns n < 0 ? val << -n : val >> n

// special thanks to our community member hello_world for the inspiration

template rshiftN<T> {
  // P is largest power of 3 smaller than T
  type P [pow3<Int>(log3<Int>(decr<Int>(sizeof T)))]

  func T rshiftN<T> (T val, Tiny n)
  {
    // if n is negative do shift left instead
    flip = isNegative[sign<Tiny>(n)]
    return flip ? lshiftNLimit<T>(val, neg<Tiny>(n)) : rshiftNLimit<T>(val, n)
  }

  func T rshiftNLimit<T> (T val, Tiny n)
  {
    // if we shift out all trits return zero
    zero = notLess[cmp<Tiny>(n, sizeof T)]
    return zero ? 0 : rshiftN2<T, P>(val, n)
  }
}

// make sure we first match against the Trit version of rshiftN2()
// so that we instantiate this one in favor of the one in rshiftN3
template rshiftN2<T, P> {
  func T rshiftN2<T, Trit> (T val, Tiny n)
  {
    // n can only be 0, 1, or 2, in which case trit 0 is 0, 1, or -
    n0 = n[0]
    zero = isZero[n0] ? val : null
    one  = n0 ? 0 & val[0 : T - 1] : null
    two  = isMin[n0] ? 0 & 0 & val[0 : T - 2] : null
    return zero | one | two
  }
}

template rshiftN3<T, P> {
  type Q [P / 3]

  func T rshiftN2<T, P> (T val, Tiny n)
  {
    // go to next-lower power of 3?
    //TODO use 1 or 2 trits of n to determine this once we know log3(P)
    //     similar to how we do it in rshiftN2<T, Trit>() above
    less = isLess[cmp<Tiny>(n, sizeof P)]
    return less ? rshiftN2<T, Q>(val, n) : rshiftN2Shift<T, P>(val, n)
  }

  func T rshiftN2Shift<T, P> (T val, Tiny n)
  {
    // shift val by current power of 3
    newVal = as<P>(0) & val[0 : T - P]
    newN = sub<Tiny>(n, sizeof P)
    return rshiftN2<T, P>(newVal, newN)
  }
}
