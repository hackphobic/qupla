// define some standard trit lengths we will use in our examples
// note that you can define the optimal trit size for any type's
// range to reduce energy requirements accordingly, but for
// simplicity we'll only define power-of-3 sized types for now

type Trit  [1]        // -/+ 1
type Tryte [3]        // -/+ 13
type Tiny  [9]        // -/+ 9,841
type Int   [27]       // -/+ 3,812,798,742,493
type Huge  [81]       // -/+ 221,713,244,121,518,884,974,124,815,309,574,946,401
type Hash  [243]      // standard 81 trytes hash value
type Hash3 [729]
type Hash9 [2187]
type Signature [6561]

// double-width and quad-width integer types for use in mul/div/mod operations
type Trit2  [2]       // -/+ 4
type Trit4  [4]       // -/+ 40
type Tryte2 [6]       // -/+ 364
type Tryte4 [12]      // -/+ 265,720
type Tiny2  [18]      // -/+ 193,710,244
type Tiny4  [36]      // -/+ 75,047,317,648,499,560
type Int2   [54]      // -/+ 29,074,868,501,520,029,845,195,084
type Int4   [108]
type Huge2  [162]
type Huge4  [324]
type Hash2  [486]
type Hash4  [972]

// define a convenience type to make code more readable
// should always be a binary boolean value false or true
// (note: this convention is not (yet) enforced by Qupla)
type Bool [Trit]

type Carry [Trit]

// here's how to define a named structured trit vector
// it consists of the concatenation of all sub-vectors
// its total size is the sum of all sub-vector sizes
// note that structures themselves can contain structures

type TinyFloat {
  Tiny mantissa   // -/+ 9,841
  Tryte exponent  // -/+ 3^13
}
type Float {      // slightly larger than IEEE 754 32-bit float
  Tiny2 mantissa  // -/+ 193,710,244
  Tryte2 exponent // -/+ 3^364
}
type Double {     // slightly larger than IEEE 754 64-bit double
  Tiny4 mantissa  // -/+ 75,047,317,648,499,560
  Tiny exponent   // -/+ 3^9,841
}
type HugeFloat {
  Int2 mantissa   // -/+ 29,074,868,501,520,029,845,195,084
  Tiny2 exponent  // -/+ 3^193,710,244
}

// attachment sub-structure layout
type Attachment {
  Int timestamp
  Int timestampLowerBound
  Int timestampUpperBound
}

// sample future IOTA transaction layout
type Transaction {
  Signature signature
  Hash extraDataDigest
  Hash address
  Huge value
  Int issuanceTimestamp
  Int timelockLowerBound
  Int timelockUpperBound
  Huge bundle
  Hash trunk
  Hash branch
  Huge tag
  Attachment attachment
  Huge nonce
}
