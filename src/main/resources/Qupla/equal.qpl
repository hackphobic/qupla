// LUT logic: return (Bool) (trit1 == trit2)
lut equal {
  -,- = true
  -,0 = false
  -,1 = false
  0,- = false
  0,0 = true
  0,1 = false
  1,- = false
  1,0 = false
  1,1 = true
}

// LUT logic: return (Bool) (trit1 == -)
lut isMin {
  - = true
  0 = false
  1 = false
}

// LUT logic: return (Bool) (trit1 < 0)
lut isNegative {
  - = true
  0 = false
  1 = false
}

// LUT logic: return (Bool) (trit1 == 1)
lut isOne {
  - = false
  0 = false
  1 = true
}

// LUT logic: return (Bool) (trit1 > 0)
lut isPositive {
  - = false
  0 = false
  1 = true
}

// LUT logic: return (Bool) (trit1 == 0)
lut isZero {
  - = false
  0 = true
  1 = false
}

// LUT logic: return (Bool) (trit1 >= 0)
lut notNegative {
  - = false
  0 = true
  1 = true
}

// LUT logic: return (Bool) (trit1 <= 0)
lut notPositive {
  - = true
  0 = true
  1 = false
}

// LUT logic: return (Bool) (trit1 != 0)
lut notZero {
  - = true
  0 = false
  1 = true
}


// returns (Bool) lhs == rhs

func Bool equal<Trit>(Trit lhs, Trit rhs) {
  return equal[lhs, rhs]
}

template equal3<T> = A + B + C {
  type A [T / 3]
  type B [T / 3]
  type C [T / 3]

  func Bool equal<T>(T lhs, T rhs) {
    val0 = equal<A>(lhs[0 : A], rhs[0 : A])
    val1 = equal<B>(lhs[A : B], rhs[A : B])
    val2 = equal<C>(lhs[A + B : C], rhs[A + B : C])
    return and3[val0, val1, val2]
  }
}

template equal<T> {
  type A [T - T / 2]
  type B [T  - A]

  func Bool equal<T>(T lhs, T rhs) {
    val0 = equal<A>(lhs[0 : A], rhs[0 : A])
    val1 = equal<B>(lhs[A : B], rhs[A : B])
    return and[val0, val1]
  }
}
