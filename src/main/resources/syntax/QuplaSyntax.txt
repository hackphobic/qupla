QuplaSource ::= (quplaStmt)*

quplaStmt ::= ImportStmt | TypeStmt | LutStmt | FuncStmt | ExecStmt | TemplateStmt | UseStmt


ImportStmt ::= 'import' moduleName


TypeStmt ::= 'type' typeName (TritVectorDef | TritStructDef | entityAlias)

TritVectorDef ::= '[' ConstExpr ']'

TritStructDef ::= '{' (ConstTypeName fieldName)+ '}'


LutStmt ::= 'lut' lutName (('{' LutEntry+ '}') | entityAlias)

LutEntry ::= tritList '=' tritList

tritList ::= tritOrBool (',' tritOrBool)*

tritOrBool ::= trit | bool


FuncStmt ::= 'func' funcSignature funcBody

funcSignature ::= ConstTypeName funcName ('<' ConstTypeName (',' ConstTypeName)* '>')? '(' (funcParam (',' funcParam)*) ')'

funcParam ::= ConstTypeName paramName

funcBody ::= '{' envExpr StateExpr* AssignExpr* ('return' CondExpr) '}'

envExpr ::= JoinExpr* AffectExpr*


ExecStmt ::= ('eval' | ('test' VectorExpr '=')) FuncExpr


TemplateStmt ::= 'template' templateName '<' (placeholderTypeName (',' placeholderTypeName)*) '>' (templateTypeRelation)? templateBody

templateTypeRelation ::= '=' templateTypeName ('+' templateTypeName)+

templateBody ::= '{' TypeStmt* FuncStmt+ '}'


UseStmt ::= 'use' templateName typeInstantiation (',' typeInstantiation)*

typeInstantiation ::= '<' (ConstTypeName (',' ConstTypeName)*) '>'


entityAlias ::= '=' entityName '@' moduleName


JoinExpr ::= 'join' environmentName ('limit' ConstNumber)?

AffectExpr ::= 'affect' environmentName ('delay' ConstNumber)?

StateExpr ::= 'state' ConstTypeName varName

AssignExpr ::= varName '=' CondExpr

CondExpr ::= MergeExpr ('?' MergeExpr ':' ('null' | CondExpr))?

MergeExpr ::= ConcatExpr ('|' ConcatExpr)*

ConcatExpr ::= PostfixExpr ('&' PostfixExpr)*

PostfixExpr ::= SubExpr | VectorExpr | SliceExpr | FuncExpr | LutExpr | SizeofExpr | TypeExpr

SubExpr ::= '(' CondExpr ')'

VectorExpr ::= trit | bool | integer | float | bitLiteral | tritLiteral | tryteLiteral | hexLiteral

SliceExpr ::= (varName | paramName) ('.' NameExpr)* ('[' ConstExpr (':' ConstExpr)? ']')?

FuncExpr ::= funcName ('<' ConstTypeName (',' ConstTypeName)* '>')? '(' (CondExpr (',' CondExpr)*) ')'

LutExpr ::= lutName '[' (MergeExpr (',' MergeExpr)*) ']'

SizeofExpr ::= 'sizeof' ConstTypeName

TypeExpr ::= ConstTypeName '{' FieldExpr+ '}'

FieldExpr ::= fieldName '=' CondExpr


ConstExpr ::= ConstTerm ([-+] ConstTerm)*

ConstTerm ::= ConstFactor ([*/%] ConstFactor)*

ConstFactor ::= ConstSubExpr | ('-' ConstFactor) | ConstNumber | (ConstTypeName ('.' NameExpr)*) | ConstFuncExpr

ConstSubExpr ::= '(' ConstExpr ')'

ConstNumber ::= number

ConstTypeName ::= typeName

NameExpr ::= name

ConstFuncExpr ::= FuncExpr


trit ::= [-01]

bool ::= 'false' | 'true'

name ::= [a-zA-Z][0-9a-zA-Z_]*

number ::= [0-9]+

integer ::= '-'? number

float ::= '-'? number '.' number

bitLiteral ::= '0b' [01]+

tritLiteral ::= '0t' [-01]+

tryteLiteral ::= '0t' [9A-Z]+

hexLiteral ::= '0x' [0-9a-fA-F]+
